@model EmailManager.Models.ViewModels.EditEmailViewModel

@{
    ViewBag.Title = Model.Heading;
}

<h1>@Model.Heading</h1>

@if (Model.Email.Id != 0)
{
    <button class="btn btn-primary mb-3" onclick='window.location.href="@Url.Action("EmailAttachment","Home", new {emailId=Model.Email.Id})"'>Dodaj załącznik</button>
    <button class="btn btn-secondary mb-3" onclick="generatePdf()">Generuj PDF</button>
    <button class="btn btn-secondary mb-3" onclick='window.location.href="@Url.Action("EmailTemplate","Print", new {emailId=Model.Email.Id})"'>Podgląd Email</button>
    <button class="btn btn-secondary mb-3" onclick="printEmail()">Drukuj Email</button>
}

<div class="row">
    <div class="col-lg-6">
        @using (Html.BeginForm("Email", "Home"))
        {
            @Html.AntiForgeryToken()

            if (Model.Email.Id == 0)
            {
                <p class="alert alert-info mt-4 mb-4">Pola nadawca, tytuł, adresat i data wysłania wiadomości są <strong>wymagane</strong></p>
            }

            @Html.HiddenFor(x => x.Email.Id)
            @Html.HiddenFor(x => x.Email.UserId)
            @Html.HiddenFor(x => x.Email.AttachmentId)

            <div class="form-group">
                @Html.LabelFor(x => x.Email.Sender.SenderPersonalDataId)
                @Html.DropDownListFor(x => x.Email.Sender.SenderPersonalDataId,
               new SelectList(Model.SenderPersonalDatas,
               "Id", "Name"), "-- Wybierz nadawcę --",
               new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Email.Sender.SenderPersonalDataId)
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.Email.MessageSubject)
                @Html.TextBoxFor(x => x.Email.MessageSubject, new { @class = "form-control", autofocus = "autofocus" })
                @Html.ValidationMessageFor(x => x.Email.MessageSubject)
            </div>


            <div class="form-group">
                @Html.LabelFor(x => x.Email.Receiver.ReceiverDataId)
                @Html.DropDownListFor(x => x.Email.Receiver.ReceiverDataId, new SelectList(Model.ReceiverDatas, "Id", "Name"), "-- Wybierz adresata --", new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Email.Receiver.ReceiverDataId)
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.Email.ReceiverCC.ReceiverDataId)
                @Html.DropDownListFor(x => x.Email.ReceiverCC.ReceiverDataId, new SelectList(Model.ReceiverCCDatas, "Id", "Name"), "-- Wybierz adresata DW --", new { @class = "form-control" })
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.Email.EmailSendDate)
                @Html.TextBoxFor(x => x.Email.EmailSendDate, "{0:dd-MM-yyy}", new { @class = "form-control", @id = "EmailSendDate", autocomplete = "off" })
                @Html.ValidationMessageFor(x => x.Email.EmailSendDate)
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.Email.MessageBody)
                @Html.TextAreaFor(x => x.Email.MessageBody, new { @class = "form-control" })
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.Email.Footer.FooterDataId)
                @Html.DropDownListFor(x => x.Email.Footer.FooterDataId, new SelectList(Model.FooterDatas, "Id", "ComplimentaryClose"), "-- Wybierz stopkę --", new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.Email.Footer.FooterDataId)
            </div>



            <div class="btn-lg mt-5">
                <button class="btn btn-secondary mb-3" type="submit">Zapisz</button>
            </div>
        }
        <button class="btn btn-primary mb-5" onclick='window.location.href="@Url.Action("SendEmail","EmailSending", new {emailId=Model.Email.Id})"'>Wyślij</button>

    </div>

    <div class="col-5 offset-lg-1">

        @Html.Partial("_EmailAttachment", Model.Email.Attachments)

    </div>
</div>

@section Scripts
{
    <script type="text/javascript">

        function generatePdf() {
             $.ajax({
                type: 'POST',
                url: "@Url.Action("EmailToPdf", "Print")",
                data: {
                    id: '@Model.Email.Id'
                },
                success: function (data)
                {
                    window.location = '@Url.Action("DownloadEmailPdf", "Print")' + '?fileGuid=' + data.FileGuid + '&fileName=' + data.FileName;
                },
                error: function (data)
                {
                    alert(data.Message);
                },
                 dataType: 'json',
                 cache: false

                });
        }

        function printEmail() {
            $.ajax({

                type: 'POST',
                url: "@Url.Action("EmailTemplate", "Print", new { invoiceId = @Model.Email.Id })",
                success: function (data)
                {
                    newWin = window.open("");
                    newWin.document.write(data);
                    newWin.print();
                    newWin.close();
                },
                error: function (data)
                {
                    alert(data.Message);
                },
            });
        }

        function deleteAttachment(attachmentId,emailId, btn) {

            if (!confirm("Czy na pewno chcesz usunąć załącznik?"))
                return;

            $.ajax({
                type: 'POST',
                url: "@Url.Action("DeleteAttachment","Home")",
                data: {
                    attachmentId: attachmentId
                },
                success: function (data)
                {
                    if (data.Success) {
                        var row = btn.parentNode.parentNode;
                        row.parentNode.removeChild(row);
                        
                        $.ajax({
                            type: 'POST',
                            url: "@Url.Action("UpdateAttachments","Home")",
                            data: {
                                emailId: emailId
                            },
                            success: function (data) {
                                if (data.Success) {
                                    location.reload();
                                }
                                else {
                                    alert(data.Message);
                                }
                            },
                            error: function (data) {
                                alert(data.Message);
                            },
                            dataType: 'json'

                        });
                    }
                    else
                    {
                        alert(data.Message);
                    }
                },
                error: function (data)
                {
                    alert(data.Message);
                },
                dataType:'json'

            });
        }

        $(document).ready(function () {

         $.validator.methods.date = function (value, element) {
            var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
            if (isChrome) {
            var d = new Date();
            return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
            } else {
            return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
             }
         };

            $('#EmailSendDate').datepicker({
                format: "dd-mm-yyyy",
                language: "pl-PL",
                multidate: false,
                autoclose: true,
                todayHighlight: true,
                startDate: '-3d',
                weekStart: 1,
                todayBtn: true,
                forceParse: false
            });
        });

    </script>

}